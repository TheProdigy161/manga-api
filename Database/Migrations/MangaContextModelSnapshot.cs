// <auto-generated />
using System;
using MangaApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaApi.Database.Migrations
{
    [DbContext(typeof(MangaContext))]
    partial class MangaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            NpgsqlModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MangaApi.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Author", "Author");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41a848c8-c83c-44a2-b1ae-dc5269605ec4"),
                            BirthDate = new DateTime(1986, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/e/e5/Tokyo_Ghoul_volume_1_cover.jpg",
                            Name = "Sui Ishida"
                        },
                        new
                        {
                            Id = new Guid("7e88b9bc-a561-4713-9bfe-afa2ae966fe6"),
                            BirthDate = new DateTime(1966, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/e/e8/Hunter_×_Hunter_vol._1.png",
                            Name = "Yoshihiro Togashi"
                        },
                        new
                        {
                            Id = new Guid("1eb3f9aa-f094-4402-9335-ee61803a6523"),
                            BirthDate = new DateTime(1974, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/9/94/NarutoCoverTankobon1.jpg",
                            Name = "Masashi Kishimoto"
                        },
                        new
                        {
                            Id = new Guid("ac5db530-7940-4f08-bb9f-9ec501a681cd"),
                            BirthDate = new DateTime(1986, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/6/6f/Death_Note_Vol_1.jpg",
                            Name = "Death Note"
                        },
                        new
                        {
                            Id = new Guid("b4bd8dcc-1443-476e-831d-d3632b508818"),
                            BirthDate = new DateTime(1963, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/d/db/Tomie_manga_cover.jpg",
                            Name = "Junji Ito"
                        },
                        new
                        {
                            Id = new Guid("b32394d4-3139-4085-8cb8-b417c7cb1071"),
                            BirthDate = new DateTime(1983, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/6/6b/Haikyū_Volume_1.jpg",
                            Name = "Haruichi Furudate"
                        },
                        new
                        {
                            Id = new Guid("9ee8c0b5-76aa-49a2-8031-44b7a3504044"),
                            BirthDate = new DateTime(1986, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/5/5a/Boku_no_Hero_Academia_Volume_1.png",
                            Name = "Kōhei Horikoshi"
                        },
                        new
                        {
                            Id = new Guid("6d1c4ee5-2cbf-4e6d-a8f1-291c6ef82f46"),
                            BirthDate = new DateTime(1975, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://static.wikia.nocookie.net/onepiece/images/3/32/Eiichiro_Oda_Infobox.png",
                            Name = "Eiichrio Oda"
                        },
                        new
                        {
                            Id = new Guid("35806dbe-2534-4402-91e4-aaf40ffc78f1"),
                            BirthDate = new DateTime(1955, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeathDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/1/15/Akira_Toriyama_in_1982.jpg",
                            Name = "Akira Toriyama"
                        },
                        new
                        {
                            Id = new Guid("5d7d2472-3c58-44fc-ad84-60984c99c4c2"),
                            BirthDate = new DateTime(1977, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/3/3f/Bleach_%28manga%29_1.png",
                            Name = "Tite Kubo"
                        },
                        new
                        {
                            Id = new Guid("d962987d-21fa-4698-8889-1d01dbf53d74"),
                            BirthDate = new DateTime(1986, 8, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/e/e9/FIBD2023HajimeIsayama_01.jpg",
                            Name = "Hajime Isayama"
                        },
                        new
                        {
                            Id = new Guid("2d197e75-c302-4c8e-9ea7-b514f8d247e6"),
                            BirthDate = new DateTime(1966, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://static.wikia.nocookie.net/ippo/images/3/3a/Author_George_Morikawa.png",
                            Name = "George Morikawa"
                        },
                        new
                        {
                            Id = new Guid("b60d9cf8-ce76-488d-9c75-60bb1023b2be"),
                            BirthDate = new DateTime(1960, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/c/c7/Hirohiko_Araki_2013_-_cropped.jpg",
                            Name = "Hirohiko Araki"
                        });
                });

            modelBuilder.Entity("MangaApi.Models.Manga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Manga", "Manga");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f41ab0bf-b8e7-415c-b2e6-bc89f06e15b0"),
                            AuthorId = new Guid("41a848c8-c83c-44a2-b1ae-dc5269605ec4"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            FinishedDate = new DateTime(2014, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/e/e5/Tokyo_Ghoul_volume_1_cover.jpg",
                            Name = "Tokyo Ghoul",
                            ReleaseDate = new DateTime(2011, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bf74f72b-d785-4a3b-b004-a1eeb79ab896"),
                            AuthorId = new Guid("7e88b9bc-a561-4713-9bfe-afa2ae966fe6"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            FinishedDate = new DateTime(2014, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/e/e8/Hunter_×_Hunter_vol._1.png",
                            Name = "Hunter x Hunter",
                            ReleaseDate = new DateTime(1998, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3d509f29-9d00-4a0c-bcf9-27fde06406f7"),
                            AuthorId = new Guid("1eb3f9aa-f094-4402-9335-ee61803a6523"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            FinishedDate = new DateTime(2014, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/9/94/NarutoCoverTankobon1.jpg",
                            Name = "Naruto",
                            ReleaseDate = new DateTime(1999, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f4749200-51b0-43a7-a12d-da7b30feb52a"),
                            AuthorId = new Guid("ac5db530-7940-4f08-bb9f-9ec501a681cd"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            FinishedDate = new DateTime(2006, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/6/6f/Death_Note_Vol_1.jpg",
                            Name = "Death Note",
                            ReleaseDate = new DateTime(2003, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("04f33b42-b12b-4f4f-82d9-1918acdcb781"),
                            AuthorId = new Guid("b4bd8dcc-1443-476e-831d-d3632b508818"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            FinishedDate = new DateTime(2000, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/d/db/Tomie_manga_cover.jpg",
                            Name = "Tomie",
                            ReleaseDate = new DateTime(1987, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e43a59f4-b4c4-4c94-abdd-1756b7336de4"),
                            AuthorId = new Guid("b32394d4-3139-4085-8cb8-b417c7cb1071"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            FinishedDate = new DateTime(2020, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/6/6b/Haikyū_Volume_1.jpg",
                            Name = "Haikyuu!!",
                            ReleaseDate = new DateTime(2012, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ee72803d-3d84-4e9a-9c63-fe38c2550611"),
                            AuthorId = new Guid("9ee8c0b5-76aa-49a2-8031-44b7a3504044"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/5/5a/Boku_no_Hero_Academia_Volume_1.png",
                            Name = "My Hero Academia",
                            ReleaseDate = new DateTime(2014, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5b37fced-19bf-4e02-900b-64073c4b8f9b"),
                            AuthorId = new Guid("6d1c4ee5-2cbf-4e6d-a8f1-291c6ef82f46"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/9/90/One_Piece%2C_Volume_61_Cover_%28Japanese%29.jpg",
                            Name = "One Piece",
                            ReleaseDate = new DateTime(1997, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("017e1019-fbc4-4308-b466-4a6b9f65acac"),
                            AuthorId = new Guid("35806dbe-2534-4402-91e4-aaf40ffc78f1"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            FinishedDate = new DateTime(1995, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/c/c9/DB_Tankōbon.png",
                            Name = "Dragon Ball",
                            ReleaseDate = new DateTime(1984, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a474e3fa-8ed8-4abc-885c-04020691b23d"),
                            AuthorId = new Guid("5d7d2472-3c58-44fc-ad84-60984c99c4c2"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            FinishedDate = new DateTime(2016, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/3/3f/Bleach_%28manga%29_1.png",
                            Name = "Bleach",
                            ReleaseDate = new DateTime(2001, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7cf0578a-96b7-4c31-99fe-56d704dee3e4"),
                            AuthorId = new Guid("d962987d-21fa-4698-8889-1d01dbf53d74"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            FinishedDate = new DateTime(2021, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/d/d6/Shingeki_no_Kyojin_manga_volume_1.jpg",
                            Name = "Attack on Titan",
                            ReleaseDate = new DateTime(2009, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("42853def-4d1d-4150-bc92-34e1c60b0f52"),
                            AuthorId = new Guid("2d197e75-c302-4c8e-9ea7-b514f8d247e6"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/c/c2/Hajime_no_Ippo_1.png",
                            Name = "Hajime No Ippo",
                            ReleaseDate = new DateTime(1989, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("983f4cd3-57a0-4f7f-88f1-1c081514907d"),
                            AuthorId = new Guid("b60d9cf8-ce76-488d-9c75-60bb1023b2be"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/f/f7/JoJo_no_Kimyou_na_Bouken_cover_-_vol1.jpg",
                            Name = "JoJo's Bizarre Adventure",
                            ReleaseDate = new DateTime(1987, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    NpgsqlModelBuilderExtensions.UseIdentityColumns(modelBuilder);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    NpgsqlModelBuilderExtensions.UseIdentityColumns(modelBuilder);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MangaApi.Models.Manga", b =>
                {
                    b.HasOne("MangaApi.Models.Author", "Author")
                        .WithMany("Mangas")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaApi.Models.Author", b =>
                {
                    b.Navigation("Mangas");
                });
#pragma warning restore 612, 618
        }
    }
}
